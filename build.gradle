import org.apache.tools.ant.taskdefs.condition.Os;

plugins {
    id "java"
    id "idea"
    id "jacoco"
    id "org.springframework.boot" version "2.7.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "io.freefair.lombok" version "6.4.3.1"
    id "org.flywaydb.flyway" version "8.5.12"
}

group = 'com.mrlonis.mythicheroes'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs << "-Xlint:unchecked"
}

jacoco {
    toolVersion = "0.8.7"
}

def filesToExcludeFromCoverage = [""]

task restartDocker {
    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                workingDir = file('./')
                commandLine = ['cmd', '/C', 'docker compose up -d']
            } else {
                commandLine = ['docker', 'compose', 'up', '-d']
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    dependsOn restartDocker
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                     exclude: filesToExcludeFromCoverage)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                     exclude: filesToExcludeFromCoverage)
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }

    mustRunAfter jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

bootRun {
    systemProperties = System.properties as Map<String, ?>
    dependsOn restartDocker
}

build {
    dependsOn {
        jacocoTestReport
        restartDocker
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5110/'
    user = 'postgres'
    password = '123456'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation 'org.apache.ant:ant:1.10.12'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}